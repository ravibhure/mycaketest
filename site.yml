---
  - name: Provision an EC2 Instance
    hosts: localhost
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro
      security_group: webserver # Change the security group name here
      image: ami-edf6758d # Change the AMI, from which you want to launch the server
      vpc_id: vpc-cc79c8aa
      vpc_subnet_id: subnet-af960af4
      region: us-west-2 # Change the Region
      keypair: ravi # Change the keypair name
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          vpc_id: "{{ vpc_id }}"
          aws_access_key: "{{ my_aws_access_key }}"
          aws_secret_key: "{{ my_aws_secret_key }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0

      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      aws_access_key={{ my_aws_access_key }}
                      aws_secret_key={{ my_aws_secret_key }}
                      instance_type={{ instance_type}} 
                      image={{ image }}
                      vpc_subnet_id={{ vpc_subnet_id }}
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
                      assign_public_ip=yes
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"


      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver

  - hosts: webserver              # define 'docker' as our action target
    #remote_user: "{{remote_user}}" #define user account for ssh login
    become: yes
    become_method: sudo
    serial: 1          #define the action will be done one by one
    roles:
    - role: common     #define 'common' role should be apply to hosts
    - role: docker     #define 'docker' role should be apply to hosts
    - role: lamp       #define 'docker' role should be apply to hosts

  - hosts: webserver
    become: yes
    become_method: sudo
    vars:
      nginx_user: www-data
      nginx_sites:
        build_http:
          - listen 80
          - server_name localhost
          - location /  { proxy_set_header  X-Real-IP  $remote_addr; proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:8888; }
    roles:
      - jdauphant.nginx
